{% import "_includes/forms" as forms %}
{% requireAdmin %}

{% extends "super-filter/_layouts/basesettings" %}

{% set title = "Settings"|t('super-filter') %}
{% set fullPageForm = true  %}
{% set settingsForm = true  %}
{% set selectedSubnavItem = 'settings' %}

{% block actionButton %}

    <div class="buttons">
        <input class="btn submit" type="submit"
               value="{{ 'Save'|t('super-filter') }}">
    </div>

{% endblock %}


{% block content %}
    <script type="text/javascript">
        window.csrfTokenName = "{{ craft.app.config.general.csrfTokenName|e('js') }}";
        window.csrfTokenValue = "{{ craft.app.request.csrfToken|e('js') }}";
    </script>
    <div id="settings-cp">
        <div>
            <input type="hidden" name="action" value="super-filter/super-filter/save-settings-config">

            {{ forms.textField({
                id: 'name',
                label: 'Plugin Name Nav',
                name: 'settings[pluginNameNav]',
                value: settings.pluginNameNav
            }) }}

            {{ forms.textField({
                id: 'prefixParam',
                label: 'Search Prefix Parameter',
                name: 'settings[prefixParam]',
                value: settings.prefixParam
            }) }}

            {{ forms.selectField({
                label: "Field Relationship Operator"|t('super-filter'),
                name: 'settings[operator]',
                options: [
                    { value: 'and', label: 'And' },
                    { value: 'or', label: 'Or' }
                ],
                value: settings.operator is defined ? settings.operator : null,
                errors: errors['operator'] is defined ? errors['operator'] : null
            }) }}

            {{ forms.selectField({
                label: "Category Relationship Operator"|t('super-filter'),
                name: 'settings[categoryOperator]',
                options: [
                    { value: 'and', label: 'And' },
                    { value: 'or', label: 'Or' }
                ],
                value: settings.operator is defined ? settings.categoryOperator : null,
                errors: errors['categoryOperator'] is defined ? errors['categoryOperator'] : null
            }) }}

            <div class="field">
                <h2>Generate Example Data and Files</h2>
                <p>To generate example data with associated twig templates follow this steps:</p>
                <ol>
                    <li>SSH to your server and run craft console command.</li>
                    <li>Run the command <strong><code>php craft super-filter/generate/example</code></strong>. This will create example entries and create template files.</li>
                    <li>After running command, visit your url <strong>https://your-url.test/super-filter-page</strong> you should be able to see Shows Entries Search Page.</li>
                </ol>
            </div>
        </div>
    </div>

{% endblock %}
{% js %}
    let app = new Vue({
        el: "#settings-cp",
        data: {

        },
        methods: {
            installSampleData(event) {
                let url = Craft.getActionUrl("super-filter/super-filter/install-sample-data");
                let data = {};
                data[csrfTokenName] = csrfTokenValue;
                let spinner = event.currentTarget.getElementsByTagName('i')[0];

                spinner.style.display = 'inline-block';
                axios.post(url, qs.stringify(data))
                    .then(({data}) => {
                        spinner.style.display = 'none';
                    });
            }
        }
    });
{% endjs %}
