{% requireAdmin %}

{% extends "_layouts/cp" %}
{% import "_includes/forms" as forms %}


{% if setupElement.id is null %}
    {% set setupId = 'new' %}
{% else %}
    {% set setupId = setupElement.id %}
{% endif %}

{% set crumbs = [
    { label: "Setup Search"|t('super-filter'), url: url('super-filter/setup-search') }
] %}

{% set title  = setupElement is defined ? setupElement.title : 'Create a new Setup'|t('super-filter') %}

{% set fullPageForm = true %}
{% set saveShortcutRedirect = continueEditingUrl %}

{% block actionButton %}

    <div class="buttons">
        <div class="btngroup">
            <input class="btn submit" type="submit"
                   value="{{ 'Save'|t('super-filter') }}">
            <div class="btn submit menubtn"></div>
            <div class="menu">
                <ul>
                    <li><a class="formsubmit"
                           data-redirect="{{ saveShortcutRedirect|hash }}">
                            {{ "Save and continue editing"|t('super-filter') }}
                            <span
                                class="shortcut">âŒ˜S</span></a></li>
                </ul>
                {% if setupElement.id is not null %}
                    <hr>
                    <ul>
                        <li><a class="formsubmit error"
                               data-action="super-filter/setup-search/delete-setup"
                               data-confirm="{{ 'Are you sure you want to delete this setup?'|t('super-filter') }}"
                               data-redirect="{{ "super-filter/setup-search"|hash }}">{{ "Delete"|t('super-filter') }}</a>
                        </li>
                    </ul>
                {% endif %}
            </div>
        </div>
    </div>


{% endblock %}

{% block details %}
    <div class="meta read-only">
        <div class="field">
            <p>To generate initial `items.vue` template:</p>
            <ol>
                <li>SSH to your server and run craft console command.</li>
                <li>Run the command <strong><code>php craft super-filter/generate/templates</code></strong></li>
                <li>Enter a search setup handle: <strong>{{ setupElement is defined ? setupElement.handle : '' }}</strong></li>
            </ol>
        </div>
    </div>
{% endblock %}

{% block content %}
    <script type="text/javascript">
        window.csrfTokenName = "{{ craft.app.config.general.csrfTokenName|e('js') }}";
        window.csrfTokenValue = "{{ craft.app.request.csrfToken|e('js') }}";
    </script>
    <input type="hidden" name="action" value="super-filter/setup-search/save-setup">
    {{ redirectInput('super-filter/setup-search') }}

    {% if setupElement.id is not null %}
        <input type="hidden" name="setupId" value="{{ setupElement.id }}">
    {% endif %}

    {{ forms.textField({
        label: "Title"|t('super-filter'),
        id: 'title',
        name: 'title',
        value: setupElement is defined ? setupElement.title : null,
        autofocus: true,
        errors: setupElement is defined ? setupElement.getErrors('title') : null
    }) }}

    {{ forms.textField({
        label: "Handle"|t('super-filter'),
        id: 'handle',
        name: 'handle',
        value: setupElement is defined ? setupElement.handle : null,
        autofocus: true,
        errors: setupElement is defined ? setupElement.getErrors('handle') : null
    }) }}


    {{ forms.textField({
        label: "Items per page"|t('super-filter'),
        id: 'perPage',
        type: 'number',
        name: 'options[perPage]',
        value: options.perPage is defined ? options.perPage : null,
        autofocus: true,
        size: 3,
        errors: options.perPage is defined ? setupElement.getErrors('options.perPage') : null
    }) }}

    {{ forms.selectField({
        label: "Base Template"|t('super-filter'),
        name: 'options[baseTemplate]',
        options: baseTemplateOptions,
        value: options.baseTemplate is defined ? options.baseTemplate : null,
        errors: setupElement is defined ? setupElement.getErrors('baseTemplate') : null
    }) }}

    {% if options is not empty and options.baseTemplate == 'vue' %}
        {{ forms.lightswitchField({
            label: 'Watch Fields?'|t('super-filter'),
            id: 'fieldWatch',
            name: 'options[fieldWatch]',
            value: 1,
            on: options.fieldWatch ?? false,
            instructions: 'Apply filters immediately when field values change.'|t('super-filter')
        }) }}

        {{ forms.lightswitchField({
            label: 'Infinite Scroll?'|t('super-filter'),
            id: 'infiniteScroll',
            name: 'options[infiniteScroll]',
            value: 1,
            on: options.infiniteScroll ?? false,
            instructions: 'Enable to implement pagination through infinite scrolling.'|t('super-filter')
        }) }}
    {% endif %}

    {{ forms.textField({
        label: "Template Override Folder"|t('super-filter'),
        instructions: 'The folder path in your craft site template. The items.twig must be copied over to this folder to modify element attributes.',
        id: 'template',
        name: 'options[template]',
        value: options.template is defined ? options.template : null,
        autofocus: true,
        size: 55,
        errors: setupElement is defined ? setupElement.getErrors('options.template') : null
    }) }}

    <div id="field-setting" v-if="!loading">
        <div v-if="items && items.elements.items">
            <input type="hidden" name="items" :value="JSON.stringify(items)" />
            <div class="field">
                <div class="heading">
                    <label>Element:</label>
                </div>
                <div class="input">
                    <div class="select">
                        <select v-model="items.elements.selected" name="elementSearchType">
                            <option v-for="(option, key) in items.elements.items" :value="key">${ option.label }</option>
                        </select>
                    </div>
                </div>
            </div>
            <div v-if="items.elements.selected === key" class="input" v-for="(option, key) in items.elements.items" >
                <div class="field">
                        <div class="heading">
                            <label>Container:</label>
                        </div>

                        <div class="select">
                            <select v-if="option.container" v-model="option.container.selected">
                                <option v-for="(option, key) in option.container.items" :value="key">${ option }</option>
                            </select>
                        </div>

                </div>


                <div class="field">
                    <div class="heading">
                        <label>Sort Fields:</label>
                    </div>
                    <div v-if="option.container.selected === index" v-for="(sort, index) in option.sorts">

                        <cards
                               :fields='sort.options' :selected-fields="sort.selected" :group="index" v-on:drag:fields="dragFields">
                            ${ option }
                        </cards>
                    </div>
                </div>

                <div class="field">
                    <div class="heading">
                        <label>Initial Sort:</label>
                    </div>
                    <input type="hidden" name="options[initSort]" :value="initSort" />
                    <div v-if="option.container.selected === index" v-for="(sort, index) in option.sorts">

                        <select v-model="initSort">
                            <template v-for="(item, key) in sort.selected">
                                <option :value="item.orderBy + '-asc'">${ item.name } ASC</option>
                                <option :value="item.orderBy + '-desc'">${ item.name } DESC</option>
                            </template>
                        </select>
                    </div>
                </div>

                <div class="field">
                    <div class="heading">
                        <label>Search Fields:</label>
                    </div>
                    <div v-if="option.container.selected === index" v-for="(item, index) in option.items">
                        <cards
                               :fields='item.options' :selected-fields="item.selected" :group="index" v-on:drag:fields="dragFields">
                            ${ option }
                        </cards>
                    </div>
                </div>
            </div>
        </div>
    </div>



    <script>

        let app = new Vue({
            el: "#field-setting",
            delimiters: ['${', '}'],
            data: {
                loading: true,
                selected: [],
                items: null,
                elements: null,
                group: null,
                firstContainer: null,
                options: [],
                sortOptions: null,
                template: 'plain',
                initSort: 'dateCreated-desc'
            },
            methods: {
                installSampleData(event) {
                    let url = Craft.getActionUrl("super-filter/super-filter/install-sample-data");
                    let data = {};

                    data[csrfTokenName] = csrfTokenValue;

                    let spinner = event.currentTarget.getElementsByTagName('i')[0];

                    spinner.style.display = 'inline-block';

                    axios.post(url, qs.stringify(data))
                        .then(({data}) => {
                            spinner.style.display = 'none';
                        });
                },
                dragFields(obj) {
                    console.log(obj);
                },
                saveSetting() {
                    console.log(this.items);
                }
            },
            mounted() {
                let url = "{{ setupUrl }}";

                {% set data = setupId != 'new' ? '{ id:' ~ setupId ~ '}' : '{}' %}

                let data = {{ data }};

                data[csrfTokenName] = csrfTokenValue;
                this.loading = true;
                axios.post(url, qs.stringify(data)).then((response) => {
                     this.items = response.data.items;

                     if (response.data.initSort) {
                         this.initSort = response.data.initSort;
                     }

                     this.loading = false;
                });
            }
        });
    </script>

{% endblock %}
{% js "new Craft.HandleGenerator('#title', '#handle');" %}
