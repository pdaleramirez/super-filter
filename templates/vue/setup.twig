{% js at head %}

window.csrfTokenName = "{{ craft.app.config.general.csrfTokenName|e('js') }}";
    window.csrfTokenValue = "{{ craft.app.request.csrfToken|e('js') }}";
    window.superFilterHandle = "{{ handle }}";
    window.superFilterParams = '{{ params|json_encode()|raw }}';
    window.superFilterItemAttributes = '{{ itemAttributes|json_encode()|raw }}';
    window.superFilterCurrentPage = '{{ craft.app.request.getPageNum() }}';
{% endjs %}

{% do view.registerAssetBundle("pdaleramirez\\superfilter\\web\\assets\\VueAsset") %}

{% js %}

let app = new Vue({
  el: "#search-app",
  delimiters: ['${', '}'],
  data: {
    handle: superFilterHandle,
    items: [],
    links: {
      totalPages: 1
    },
    config: {
      params: {
        sort: null,
        fields: [],
        siteId: null
      }
    },
    itemAttributes: superFilterItemAttributes,
    loading: true,
    query: ''
  },
  methods: {
    submitFilter() {
      this.config.currentPage = 1;

      this.getFilteredItems();
    },
    clearFilter() {
      this.config.currentPage = 1;
      let fields = this.config.params.fields;
      for (let key in fields) {
        if (Array.isArray(fields[key])) {
          this.config.params.fields[key] = [];
        } if (typeof this.config.params.fields[key] === 'object' && typeof this.config.params.fields[key] !== null) {
            for (let index in this.config.params.fields[key]) {
              this.config.params.fields[key][index] = ""
            }
        } else {
          this.config.params.fields[key] = "";
        }
      }

      let parse = JSON.parse(superFilterParams);

      if (parse.preFilter !== undefined) {
        this.config.params.fields = {...this.config.params.fields, ...parse.preFilter};
      }

      this.getFilteredItems();
    },
    submitSort() {
      this.getFilteredItems();
    },
    pushState() {
      let queryString = (this.query !== '') ? window.location.pathname + '?' + this.query : window.location.pathname;

      window.history.pushState("/", "", queryString);
    },
    onPaginate(pageNum) {
      this.config.currentPage = pageNum;

      this.getFilteredItems();
    },
    getFilteredItems() {

      let data = {
        handle: this.handle,
        config: this.config,
        itemAttributes: this.itemAttributes
      };

      data[csrfTokenName] = csrfTokenValue;
      this.loading = true;

      axios.post('/super-filter/filter', qs.stringify(data))
        .then(({data}) => {
          this.items = data.items;
          this.links = data.links;
          this.query = data.query;
          this.loading = false;

          this.pushState();
        });
    },
    getFields() {

      let parse = JSON.parse(superFilterParams);

      let data = {
        handle: this.handle,
        config: {
          params: {
            sort: null,
            fields: [],
            siteId: "*"
          }
        },
        itemAttributes: this.itemAttributes
      };

      data.config.params.fields = parse.fields;

      if (parse.sort !== undefined) {
        data.config.params.sort = parse.sort;
      }

      if (parse.siteId !== undefined) {
        data.config.params.siteId = parse.siteId;
      }

      data[csrfTokenName] = csrfTokenValue;
      this.loading = true;


      axios.post('/super-filter/fields', qs.stringify(data))
        .then(({data}) => {
          this.config = data.config;

          this.config.params.fields = {...data.config.params.fields, ...parse.fields};

          this.config.params.sort = data.config.params.sort;

          this.items = data.items;
          this.links = data.links;

          this.loading = false;
        });
    }
  },
  mounted() {

    this.config.currentPage = Number(superFilterCurrentPage);

    let parse = JSON.parse(superFilterParams);

    this.getFields();
  }
});
{% endjs %}
